**TC-(O(nlogn)
**SC-(o(n))
void help(Node* root, int d, map<int, vector<int>> &m)
{
    if(!root)
        return;
    
    m[d].push_back(root->data);
    
    help(root->left, d+1, m);
    help(root->right, d, m);
}

vector<int> diagonal(Node *root)
{
    map<int, vector<int>> m;
    int d=0;
    help(root,d, m);
    
    vector<int> res;
    for(auto it: m)
    {
        vector<int> v=it.second;
        res.insert(res.end(), v.begin(), v.end());
        
    }
    return res;
   // your code here
}

optimised approach
**TC-O(n)
**SC-O(n)
vector<int> diagonal(Node *root)
{
    if(!root) return {};
    
    queue<Node*> q;
    q.push(root);
    vector<int> res;
    
    while(!q.empty())
    {
        int sz=q.size();
        while(sz--)
        {
            Node* node=q.front();
            q.pop();
            while(node)
            {
                if(node->left)
                {
                    q.push(node->left);
                }
                
                res.push_back(node->data);
                node=node->right;
                
            }
        }
    }
    return res;
   // your code here
}


struct node{
	int parent;
	int rank;
};
int find(int v,vector<node>& dsuf)
{
	if(dsuf[v].parent==v)
		return v;
	return dsuf[v].parent = find(dsuf[v].parent, dsuf);
}
void union_op(int fromP, int toP, vector<node>& dsuf)
{
	if(dsuf[fromP].rank > dsuf[toP].rank)
		dsuf[toP].parent = fromP;
	else if(dsuf[fromP].rank < dsuf[toP].rank)
		dsuf[fromP].parent = toP;
	else
	{
		dsuf[fromP].parent = toP;
		dsuf[toP].rank+=1;
	}
}

bool valid(int x, int y, int n, int m, vector<vector<int>> &grid){
	if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] == 0){
		return 0;
	}
	return 1;
}

vector<int> numOfIslandsII(int n, int m, vector<vector<int>> &q){
	vector<node> dsuf(n*m);
	
	vector<int> dx = {1, 0, -1, 0};
	vector<int> dy = {0, 1, 0, -1};
	
	vector<int> res;
	vector<vector<int>> grid(n, vector<int> (m,0));
	for(int i=0;i<n*m;i++)
	{
		dsuf[i].parent = i;
		dsuf[i].rank = 0;
	}
	long long int islands=0;
	
	for(int k=0;k< q.size();k++)
	{
		int x=q[k][0], y=q[k][1];
		int ind1=x*m + y;
		
		if(grid[x][y]==1)
		{
			res.push_back(islands);
			continue;
		}
		
		islands++;
		
		for (int dir = 0; dir < 4; dir++){
			int dxx = x + dx[dir];
			int dyy = y + dy[dir];

			if (!valid(dxx, dyy, n, m, grid)){
				continue;
			}
		
			int ind2=dxx*m + dyy;
			if(find(ind1, dsuf) != find(ind2, dsuf))
			{
				union_op(ind1, ind2, dsuf);
				islands--;
			}
	
		}
		grid[x][y]=1;
		res.push_back(islands);
	}
	return res;
}

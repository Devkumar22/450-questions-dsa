class Solution {
public:
    bool dfs(int src, vector<vector<int>>& graph, vector<int> &vis,vector<int> &dfsvis,vector<int> &cyclicnodes)
    {
        vis[src]=true;
        dfsvis[src]=true;
        for(auto it: graph[src])
        {
            if(!vis[it])
            {    if(dfs(it,graph, vis, dfsvis, cyclicnodes))
                {
                    cyclicnodes[src]=true;
                    return true;
                }
            }
            else if(vis[it] and dfsvis[it])
            {
                cyclicnodes[src]=true;
                return true;
            }
        }
        
        dfsvis[src]=false;
        return false;
    }
    
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
       
        int n=graph.size();
        
        vector<int> vis(n,false);
        vector<int> dfsvis(n,false);
        vector<int> cyclicnodes(n,false);
        
        
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                dfs(i,graph, vis, dfsvis, cyclicnodes);
            }
        }
        vector<int> res;
        for(int i=0;i<n;i++)
        {
            if(!cyclicnodes[i])
                res.push_back(i);
                
        }
        return res;
    }
};

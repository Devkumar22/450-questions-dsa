class Solution {
public:    
    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size(), minutes=-1;
        
        
        vector<vector<int>> vis(n, vector<int> (m,0));
        queue<pair<int,int>> q;
        int fresh=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                    fresh++;
                
                if(grid[i][j]==2)
                    q.push({i,j});
            }
        }
        
        
        
        while(!q.empty())
        { 
             minutes++;
            int di[]={0,0,1,-1};
            int dj[]={1,-1,0,0};

            int s=q.size();
            while(s--)
            {
                
                auto [i, j] = q.front();
                q.pop();
                
                for(int k=0;k<4;k++)
                {
                    int ni=di[k]+i;
                    int nj=dj[k]+j;
                    if(ni>=0 and nj>=0 and ni<n and nj<m)
                    {
                            if(grid[ni][nj]==1)
                            {
                                grid[ni][nj]=2;
                                q.push({ni,nj});
                                fresh--;
                            }
                    }

                }
            }
            
           
            
        }
        if(fresh>0) return -1;
        if(minutes==-1) return 0;
        return minutes;
    }
};
